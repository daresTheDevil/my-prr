{
  "name": "PRRIP Monorepo Dev Environment",
  // Use the existing docker-compose.yml to define the services.
  "dockerComposeFile": ["../docker-compose.yml"],
  // The service within docker-compose.yml that VS Code should connect to.
  "service": "core-app",
  // The TTY for the service. This is important for interactive terminals.
  "runServices": ["core-app"],
  // The workspace folder inside the container where VS Code should open.
  // This should match the working_dir or volume mount path for the core-app service.
  "workspaceFolder": "/workspace",
  // Shut down an existing Docker Compose project when this container is created.
  "shutdownAction": "stopCompose",
  // Features to install in the dev container.
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": "false",
      "installOhMyZsh": "false",
      "upgradePackages": "true",
      "username": "node" // Ensure utils are configured for the 'node' user
    },
    "ghcr.io/devcontainers/features/git:1": {
      "ppa": "false",
      "version": "latest"
    },
    // Docker-in-Docker can be useful if you need to build images or run other Docker commands from within the dev container.
    // "ghcr.io/devcontainers/features/docker-in-docker:2": {
    //     "version": "latest",
    //     "moby": true
    // }
    // PNPM feature for easy installation if not already in the base image or handled by core-app setup
    "ghcr.io/devcontainers/features/pnpm:1": {
        "version": "latest"
    }
  },
  // VS Code specific customizations
  "customizations": {
    "vscode": {
      // VS Code settings to apply specifically within the dev container.
      "settings": {
        "terminal.integrated.defaultProfile.linux": "bash", // node:slim images have bash
        "terminal.integrated.profiles.linux": {
            "bash": {
                "path": "/bin/bash"
            }
        },
        // Add any other VS Code settings beneficial for this project
        "eslint.workingDirectories": [
            { "directory": "/workspace/packages/core-app", "changeProcessCWD": true }
        ],
        "typescript.tsdk": "/workspace/node_modules/typescript/lib" // Point to workspace TypeScript
      },
      // VS Code extensions to install in the dev container.
      "extensions": [
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode",
        "prisma.prisma",
        "humao.rest-client",
        "ms-azuretools.vscode-docker",
        "redhat.vscode-yaml",
        "github.vscode-github-actions",
        "mhutchie.git-graph",
        "eamodio.gitlens",
        "Markdoc.markdoc-vscode",
        "bradlc.vscode-tailwindcss", // Epic Stack uses Tailwind
        "Orta.vscode-jest" // For Vitest/Jest test running
      ]
    }
  },
  // Commands to run after the container is created.
  // This runs once when the container is built or rebuilt.
  // 1. Install all pnpm dependencies for the monorepo.
  // 2. Run Prisma migrations for the core-app.
  // 3. Generate the Prisma client for the core-app.
  // 4. Seed the database for the core-app.
  "postCreateCommand": "pnpm install --frozen-lockfile && pnpm --filter core-app-2ece exec prisma migrate dev --name init_dev_db && pnpm --filter core-app-2ece exec prisma generate && pnpm --filter core-app-2ece exec prisma db seed",
  // User to run as inside the container.
  // The 'node' user is created by the official Node.js images.
  "remoteUser": "node"
}