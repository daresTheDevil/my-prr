# Logical Component: Data Access

## Overview

The "Data Access" component within the PRRIP's consolidated Remix application is responsible for all interactions with the various supported databases. It provides a consistent and type-safe interface for the rest of the application to perform CRUD (Create, Read, Update, Delete) operations, abstracting away the specifics of the underlying database systems.

This component primarily leverages Prisma as its Object-Relational Mapper (ORM).

## Responsibilities

*   **Database Abstraction:** Provide a high-level API for database operations, shielding the application from raw SQL and database-specific dialects where possible.
*   **Schema Definition:** Define database schemas using Prisma Schema Language (`schema.prisma`).
*   **Migrations:** Manage database schema migrations using `prisma migrate`.
*   **Query Execution:** Execute queries (reads, writes, updates, deletes) against the configured database.
*   **Transaction Management:** Support for database transactions to ensure data consistency for operations that require multiple steps. Prisma handles this implicitly for many operations or explicitly via `prisma.$transaction()`.
*   **Connection Pooling:** Managed by Prisma Client to efficiently handle database connections.
*   **Type Safety:** Provide strong typing for query inputs and results, enforced by Prisma Client generated from the schema.
*   **Multi-Backend Support:** Configure and manage connections to different database types supported by Prisma (PostgreSQL, MS SQL Server, SQLite, Supabase).

## Key Technologies

*   **Prisma:**
    *   **Prisma Client:** Auto-generated and type-safe database client.
    *   **Prisma Migrate:** Declarative data modeling and migration system.
    *   **Prisma Schema Language (PSL):** For defining database schemas.
*   **TypeScript:** For type safety in application code interacting with Prisma Client.
*   **Databases:**
    *   PostgreSQL (Primary)
    *   SQLite (Local Development)
    *   MS SQL Server
    *   Supabase (PostgreSQL compatible)

## Interactions

*   **`app-shell` (Remix Loaders/Actions):** The primary consumer of the Data Access component. Loaders use it to fetch data for rendering pages, and actions use it to persist changes.
*   **`api` (Resource Routes):** API endpoints use this component to interact with the database.
*   **`data-processing`:** The data processing logic uses this component to read source data and write processed/transformed data.
*   **`integration`:** May use this component if legacy system integrations require direct database interaction with PRRIP's databases.
*   **Databases:** Directly connects to and executes commands against the configured database instances.

## Structure (Conceptual within `packages/core-app/`)

*   `prisma/schema.prisma`: The central Prisma schema file defining data models, relations, and database connection details.
*   `prisma/migrations/`: Directory containing migration files generated by `prisma migrate`.
*   `app/lib/db.server.ts` (or similar, as per Epic Stack conventions): Instantiation and export of the Prisma Client.
*   Service modules/functions (e.g., `app/models/*.server.ts` or `app/services/data/*.server.ts`): Encapsulate common queries or data access patterns related to specific models/entities.

## Database Configuration

Database connection URLs are typically managed via environment variables (e.g., `DATABASE_URL`) which Prisma uses to connect to the appropriate database instance. Different environment variables can be set for development, testing, and production environments.

## Notes

*   The Data Access component is critical for data integrity and consistency.
*   Proper schema design and efficient query patterns are essential for performance.
*   Prisma's migration system should be the sole method for evolving the database schema to maintain consistency.